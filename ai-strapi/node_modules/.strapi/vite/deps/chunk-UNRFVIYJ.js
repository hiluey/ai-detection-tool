import {
  ForwardRef$4n
} from "./chunk-2CB2WHZW.js";
import {
  require_react
} from "./chunk-MADUDGYZ.js";
import {
  __toESM
} from "./chunk-PLDDJCW6.js";

// node_modules/@strapi/plugin-cloud/dist/admin/chunks/index-B393u3lO.mjs
var import_react = __toESM(require_react(), 1);
var pluginId = "cloud";
var Initializer = ({ setPlugin }) => {
  const ref = (0, import_react.useRef)(setPlugin);
  (0, import_react.useEffect)(() => {
    ref.current(pluginId);
  }, []);
  return null;
};
var prefixPluginTranslations = (trad, pluginId2) => {
  return Object.keys(trad).reduce((acc, current) => {
    acc[`${pluginId2}.${current}`] = trad[current];
    return acc;
  }, {});
};
function __variableDynamicImportRuntime1__(path) {
  switch (path) {
    case "./translations/en.json":
      return import("./en-DHxfjovA-H77YX4F7.js");
    case "./translations/fr.json":
      return import("./fr-XFxvAMHP-L3OTFIJE.js");
    case "./translations/uk.json":
      return import("./uk-dBK8S80E-X4OYOLRH.js");
    default:
      return new Promise(function(resolve, reject) {
        (typeof queueMicrotask === "function" ? queueMicrotask : setTimeout)(
          reject.bind(null, new Error("Unknown variable dynamic import: " + path))
        );
      });
  }
}
var name = "Deploy";
var index = {
  register(app) {
    const { backendURL } = window.strapi;
    if (backendURL == null ? void 0 : backendURL.includes("localhost")) {
      app.addMenuLink({
        to: `plugins/${pluginId}`,
        icon: ForwardRef$4n,
        intlLabel: {
          id: `${pluginId}.plugin.name`,
          defaultMessage: name
        },
        Component: async () => {
          const { App } = await import("./App-BuLBg0Lm-EYPYHALP.js");
          return App;
        }
      });
      const plugin = {
        id: pluginId,
        initializer: Initializer,
        isReady: false,
        name
      };
      app.registerPlugin(plugin);
    }
  },
  async registerTrads(app) {
    const { locales } = app;
    const importedTrads = await Promise.all(locales.map((locale) => {
      return __variableDynamicImportRuntime1__(`./translations/${locale}.json`).then(({ default: data }) => {
        return {
          data: prefixPluginTranslations(data, pluginId),
          locale
        };
      }).catch(() => {
        return {
          data: {},
          locale
        };
      });
    }));
    return Promise.resolve(importedTrads);
  }
};

export {
  pluginId,
  index
};
//# sourceMappingURL=chunk-UNRFVIYJ.js.map
