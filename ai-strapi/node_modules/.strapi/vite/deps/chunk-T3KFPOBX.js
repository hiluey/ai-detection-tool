import {
  require_isNil
} from "./chunk-AOLNGJZC.js";
import {
  useLicenseLimits
} from "./chunk-G3VEJZTX.js";
import {
  useNotification
} from "./chunk-7O432AQ6.js";
import {
  useIntl
} from "./chunk-TWYY2DQ2.js";
import {
  useLocation
} from "./chunk-TUXTO2Z5.js";
import {
  require_react
} from "./chunk-MADUDGYZ.js";
import {
  __toESM
} from "./chunk-PLDDJCW6.js";

// node_modules/@strapi/admin/dist/admin/chunks/useLicenseLimitNotification-C5v7Ol_s.mjs
var React = __toESM(require_react(), 1);
var import_isNil = __toESM(require_isNil(), 1);
var STORAGE_KEY_PREFIX = "strapi-notification-seat-limit";
var BILLING_STRAPI_CLOUD_URL = "https://cloud.strapi.io/profile/billing";
var BILLING_SELF_HOSTED_URL = "https://strapi.io/billing/request-seats";
var useLicenseLimitNotification = () => {
  const { formatMessage } = useIntl();
  const { license, isError, isLoading } = useLicenseLimits();
  const { toggleNotification } = useNotification();
  const { pathname } = useLocation();
  const { enforcementUserCount, permittedSeats, licenseLimitStatus, isHostedOnStrapiCloud } = license ?? {};
  React.useEffect(() => {
    if (isError || isLoading) {
      return;
    }
    const shouldDisplayNotification = !(0, import_isNil.default)(permittedSeats) && !window.sessionStorage.getItem(`${STORAGE_KEY_PREFIX}-${pathname}`) && licenseLimitStatus === "OVER_LIMIT";
    let notificationType;
    if (licenseLimitStatus === "OVER_LIMIT") {
      notificationType = "danger";
    }
    if (shouldDisplayNotification) {
      toggleNotification({
        type: notificationType,
        message: formatMessage({
          id: "notification.ee.warning.over-.message",
          defaultMessage: "Add seats to {licenseLimitStatus, select, OVER_LIMIT {invite} other {re-enable}} Users. If you already did it but it's not reflected in Strapi yet, make sure to restart your app."
        }, {
          licenseLimitStatus
        }),
        title: formatMessage({
          id: "notification.ee.warning.at-seat-limit.title",
          defaultMessage: "{licenseLimitStatus, select, OVER_LIMIT {Over} other {At}} seat limit ({enforcementUserCount}/{permittedSeats})"
        }, {
          licenseLimitStatus,
          enforcementUserCount,
          permittedSeats
        }),
        link: {
          url: isHostedOnStrapiCloud ? BILLING_STRAPI_CLOUD_URL : BILLING_SELF_HOSTED_URL,
          label: formatMessage({
            id: "notification.ee.warning.seat-limit.link",
            defaultMessage: "{isHostedOnStrapiCloud, select, true {ADD SEATS} other {CONTACT SALES}}"
          }, {
            isHostedOnStrapiCloud
          })
        },
        blockTransition: true,
        onClose() {
          window.sessionStorage.setItem(`${STORAGE_KEY_PREFIX}-${pathname}`, "true");
        }
      });
    }
  }, [
    toggleNotification,
    license,
    pathname,
    formatMessage,
    isLoading,
    permittedSeats,
    licenseLimitStatus,
    enforcementUserCount,
    isHostedOnStrapiCloud,
    isError
  ]);
};

export {
  useLicenseLimitNotification
};
//# sourceMappingURL=chunk-T3KFPOBX.js.map
