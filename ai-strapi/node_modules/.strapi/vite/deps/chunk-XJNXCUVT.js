// node_modules/@strapi/plugin-users-permissions/dist/admin/chunks/index-CY5JZ38k.mjs
var name$1 = "@strapi/plugin-users-permissions";
var strapi = {
  displayName: "Roles & Permissions",
  name: "users-permissions",
  description: "Protect your API with a full authentication process based on JWT. This plugin comes also with an ACL strategy that allows you to manage the permissions between the groups of users.",
  required: true,
  kind: "plugin"
};
var PERMISSIONS = {
  // Roles
  accessRoles: [
    {
      action: "plugin::users-permissions.roles.create",
      subject: null
    },
    {
      action: "plugin::users-permissions.roles.read",
      subject: null
    }
  ],
  createRole: [
    {
      action: "plugin::users-permissions.roles.create",
      subject: null
    }
  ],
  deleteRole: [
    {
      action: "plugin::users-permissions.roles.delete",
      subject: null
    }
  ],
  readRoles: [
    {
      action: "plugin::users-permissions.roles.read",
      subject: null
    }
  ],
  updateRole: [
    {
      action: "plugin::users-permissions.roles.update",
      subject: null
    }
  ],
  // AdvancedSettings
  readAdvancedSettings: [
    {
      action: "plugin::users-permissions.advanced-settings.read",
      subject: null
    }
  ],
  updateAdvancedSettings: [
    {
      action: "plugin::users-permissions.advanced-settings.update",
      subject: null
    }
  ],
  // Emails
  readEmailTemplates: [
    {
      action: "plugin::users-permissions.email-templates.read",
      subject: null
    }
  ],
  updateEmailTemplates: [
    {
      action: "plugin::users-permissions.email-templates.update",
      subject: null
    }
  ],
  // Providers
  readProviders: [
    {
      action: "plugin::users-permissions.providers.read",
      subject: null
    }
  ],
  updateProviders: [
    {
      action: "plugin::users-permissions.providers.update",
      subject: null
    }
  ]
};
var pluginId = name$1.replace(/^@strapi\/plugin-/i, "");
var getTrad = (id) => `${pluginId}.${id}`;
var prefixPluginTranslations = (trad, pluginId2) => {
  return Object.keys(trad).reduce((acc, current) => {
    acc[`${pluginId2}.${current}`] = trad[current];
    return acc;
  }, {});
};
function __variableDynamicImportRuntime4__(path) {
  switch (path) {
    case "./translations/ar.json":
      return import("./ar-G6bUGuUb-TKCAUJBH.js");
    case "./translations/cs.json":
      return import("./cs-Bu59JqhG-C65KI4MP.js");
    case "./translations/de.json":
      return import("./de-B81A69_5-TWNIM4UY.js");
    case "./translations/dk.json":
      return import("./dk-BaelzvBE-TQ4NIQGY.js");
    case "./translations/en.json":
      return import("./en-BhgCBe7M-BUJRF7FG.js");
    case "./translations/es.json":
      return import("./es-B0wXmvRj-SLF6YFCH.js");
    case "./translations/fr.json":
      return import("./fr-CGYvGUXg-QIBTNPER.js");
    case "./translations/id.json":
      return import("./id-CNzbwFjA-A42V4VYF.js");
    case "./translations/it.json":
      return import("./it-B2H2foTf-C63H7PCN.js");
    case "./translations/ja.json":
      return import("./ja-C0z9d7L9-CFAGFTJH.js");
    case "./translations/ko.json":
      return import("./ko-CzUgzpeS-LXUKJJOJ.js");
    case "./translations/ms.json":
      return import("./ms-CCacxjim-GHYSBME2.js");
    case "./translations/nl.json":
      return import("./nl-DDC3nZW--S6P3MZC4.js");
    case "./translations/pl.json":
      return import("./pl-XkS463rN-I3AI6NWE.js");
    case "./translations/pt-BR.json":
      return import("./pt-BR-8cC7z8Km-5NMG3ROU.js");
    case "./translations/pt.json":
      return import("./pt-DQpEvio8-R5HVJHFZ.js");
    case "./translations/ru.json":
      return import("./ru-nzL_7Mhg-M5XPBXWZ.js");
    case "./translations/sk.json":
      return import("./sk-Ddxc_tZA-QLRNPKSV.js");
    case "./translations/sv.json":
      return import("./sv-By3RYpMG-EPQC3B3K.js");
    case "./translations/th.json":
      return import("./th-COl50vqb-DBBSC2I5.js");
    case "./translations/tr.json":
      return import("./tr-80SJU6jg-RJNTW7IJ.js");
    case "./translations/uk.json":
      return import("./uk-DnrIlPwG-BC35FN3J.js");
    case "./translations/vi.json":
      return import("./vi-69AF03Iv-HCTVEZAJ.js");
    case "./translations/zh-Hans.json":
      return import("./zh-Hans-DmDcSsp7-GMHT3SAM.js");
    case "./translations/zh.json":
      return import("./zh-BzSkqxo--PXBGPF3J.js");
    default:
      return new Promise(function(resolve, reject) {
        (typeof queueMicrotask === "function" ? queueMicrotask : setTimeout)(
          reject.bind(null, new Error("Unknown variable dynamic import: " + path))
        );
      });
  }
}
var name = strapi.name;
var index = {
  register(app) {
    app.createSettingSection({
      id: "users-permissions",
      intlLabel: {
        id: getTrad("Settings.section-label"),
        defaultMessage: "Users & Permissions plugin"
      }
    }, [
      {
        intlLabel: {
          id: "global.roles",
          defaultMessage: "Roles"
        },
        id: "roles",
        to: `users-permissions/roles`,
        Component: () => import("./index-BgAfLcWs-DYWK5R27.js"),
        permissions: PERMISSIONS.accessRoles
      },
      {
        intlLabel: {
          id: getTrad("HeaderNav.link.providers"),
          defaultMessage: "Providers"
        },
        id: "providers",
        to: `users-permissions/providers`,
        Component: () => import("./index-CHTUC0LM-H74VEG26.js"),
        permissions: PERMISSIONS.readProviders
      },
      {
        intlLabel: {
          id: getTrad("HeaderNav.link.emailTemplates"),
          defaultMessage: "Email templates"
        },
        id: "email-templates",
        to: `users-permissions/email-templates`,
        Component: () => import("./index-BBjNJt_G-UBBC54G5.js").then((mod) => ({
          default: mod.ProtectedEmailTemplatesPage
        })),
        permissions: PERMISSIONS.readEmailTemplates
      },
      {
        intlLabel: {
          id: getTrad("HeaderNav.link.advancedSettings"),
          defaultMessage: "Advanced Settings"
        },
        id: "advanced-settings",
        to: `users-permissions/advanced-settings`,
        Component: () => import("./index-Cy-tPfRk-OOL4DJFG.js").then((mod) => ({
          default: mod.ProtectedAdvancedSettingsPage
        })),
        permissions: PERMISSIONS.readAdvancedSettings
      }
    ]);
    app.registerPlugin({
      id: "users-permissions",
      name
    });
  },
  bootstrap() {
  },
  async registerTrads({ locales }) {
    const importedTrads = await Promise.all(locales.map((locale) => {
      return __variableDynamicImportRuntime4__(`./translations/${locale}.json`).then(({ default: data }) => {
        return {
          data: prefixPluginTranslations(data, "users-permissions"),
          locale
        };
      }).catch(() => {
        return {
          data: {},
          locale
        };
      });
    }));
    return Promise.resolve(importedTrads);
  }
};

export {
  PERMISSIONS,
  getTrad,
  index
};
//# sourceMappingURL=chunk-XJNXCUVT.js.map
