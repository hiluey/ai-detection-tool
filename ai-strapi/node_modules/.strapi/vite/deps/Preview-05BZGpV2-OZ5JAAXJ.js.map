{
  "version": 3,
  "sources": ["../../../@strapi/content-manager/admin/src/preview/components/PreviewContent.tsx", "../../../@strapi/content-manager/admin/src/preview/components/PreviewHeader.tsx", "../../../@strapi/content-manager/admin/src/preview/pages/Preview.tsx"],
  "sourcesContent": ["import { Box } from '@strapi/design-system';\nimport { useIntl } from 'react-intl';\n\nimport { usePreviewContext } from '../pages/Preview';\n\nconst PreviewContent = () => {\n  const previewUrl = usePreviewContext('PreviewContent', (state) => state.url);\n\n  const { formatMessage } = useIntl();\n\n  return (\n    <Box\n      src={previewUrl}\n      /**\n       * For some reason, changing an iframe's src tag causes the browser to add a new item in the\n       * history stack. This is an issue for us as it means clicking the back button will not let us\n       * go back to the edit view. To fix it, we need to trick the browser into thinking this is a\n       * different iframe when the preview URL changes. So we set a key prop to force React\n       * to mount a different node when the src changes.\n       */\n      key={previewUrl}\n      title={formatMessage({\n        id: 'content-manager.preview.panel.title',\n        defaultMessage: 'Preview',\n      })}\n      width=\"100%\"\n      height=\"100%\"\n      borderWidth={0}\n      tag=\"iframe\"\n    />\n  );\n};\n\nexport { PreviewContent };\n", "import * as React from 'react';\n\nimport {\n  DescriptionComponentRenderer,\n  useClipboard,\n  useHistory,\n  useNotification,\n  useQueryParams,\n  useStrapiApp,\n} from '@strapi/admin/strapi-admin';\nimport { IconButton, Tabs, Typography, Grid, Flex } from '@strapi/design-system';\nimport { Cross, Link as LinkIcon } from '@strapi/icons';\nimport { stringify } from 'qs';\nimport { useIntl } from 'react-intl';\nimport { Link, type To } from 'react-router-dom';\nimport { styled } from 'styled-components';\n\nimport { InjectionZone } from '../../components/InjectionZone';\nimport { DocumentActionButton } from '../../pages/EditView/components/DocumentActions';\nimport { DocumentStatus } from '../../pages/EditView/components/DocumentStatus';\nimport { getDocumentStatus } from '../../pages/EditView/EditViewPage';\nimport { usePreviewContext } from '../pages/Preview';\n\nimport type { ContentManagerPlugin, DocumentActionProps } from '../../content-manager';\n\n/* -------------------------------------------------------------------------------------------------\n * ClosePreviewButton\n * -----------------------------------------------------------------------------------------------*/\n\nconst ClosePreviewButton = () => {\n  const [{ query }] = useQueryParams<{\n    plugins?: Record<string, unknown>;\n  }>();\n  const { formatMessage } = useIntl();\n\n  const canGoBack = useHistory('BackButton', (state) => state.canGoBack);\n  const goBack = useHistory('BackButton', (state) => state.goBack);\n  const history = useHistory('BackButton', (state) => state.history);\n  const locationIndex = useHistory('BackButton', (state) => state.currentLocationIndex);\n\n  /**\n   * Get the link destination from the history.\n   * Rely on a fallback (the parent edit view page) if there's no page to go back .\n   */\n  const historyTo = canGoBack ? history.at(locationIndex - 2) : undefined;\n  const fallback = {\n    pathname: '..',\n    search: stringify(query, { encode: false }),\n  } satisfies To;\n  const toWithFallback = historyTo ?? fallback;\n\n  const handleClick = (e: React.MouseEvent) => {\n    if (canGoBack) {\n      // Prevent normal link behavior, go back in the history stack instead\n      e.preventDefault();\n      goBack();\n      return;\n    }\n\n    // Otherwise rely on native link behavior to go back to the edit view. We don't use navigate()\n    // here in order to get the relative=\"path\" functionality from the Link component.\n  };\n\n  return (\n    <IconButton\n      variant=\"ghost\"\n      tag={Link}\n      relative=\"path\"\n      to={toWithFallback}\n      onClick={handleClick}\n      label={formatMessage({\n        id: 'content-manager.preview.header.close',\n        defaultMessage: 'Close preview',\n      })}\n    >\n      <Cross />\n    </IconButton>\n  );\n};\n\n/* -------------------------------------------------------------------------------------------------\n * Status\n * -----------------------------------------------------------------------------------------------*/\n\nconst Status = () => {\n  // Get status\n  const document = usePreviewContext('PreviewHeader', (state) => state.document);\n  const schema = usePreviewContext('PreviewHeader', (state) => state.schema);\n  const meta = usePreviewContext('PreviewHeader', (state) => state.meta);\n  const hasDraftAndPublished = schema?.options?.draftAndPublish ?? false;\n\n  if (!hasDraftAndPublished) {\n    return null;\n  }\n\n  const status = getDocumentStatus(document, meta);\n\n  return <DocumentStatus status={status} size=\"XS\" />;\n};\n\nconst PreviewTabs = () => {\n  const { formatMessage } = useIntl();\n\n  // URL query params\n  const [{ query }, setQuery] = useQueryParams<{ status: 'draft' | 'published' }>();\n\n  // Get status\n  const document = usePreviewContext('PreviewHeader', (state) => state.document);\n  const schema = usePreviewContext('PreviewHeader', (state) => state.schema);\n  const meta = usePreviewContext('PreviewHeader', (state) => state.meta);\n  const hasDraftAndPublish = schema?.options?.draftAndPublish ?? false;\n  const documentStatus = getDocumentStatus(document, meta);\n\n  const handleTabChange = (status: string) => {\n    if (status === 'published' || status === 'draft') {\n      setQuery({ status }, 'push', true);\n    }\n  };\n\n  if (!hasDraftAndPublish) {\n    return null;\n  }\n\n  return (\n    <Tabs.Root variant=\"simple\" value={query.status || 'draft'} onValueChange={handleTabChange}>\n      <Tabs.List\n        aria-label={formatMessage({\n          id: 'preview.tabs.label',\n          defaultMessage: 'Document status',\n        })}\n      >\n        <StatusTab value=\"draft\">\n          {formatMessage({\n            id: 'content-manager.containers.List.draft',\n            defaultMessage: 'draft',\n          })}\n        </StatusTab>\n        <StatusTab value=\"published\" disabled={documentStatus === 'draft'}>\n          {formatMessage({\n            id: 'content-manager.containers.List.published',\n            defaultMessage: 'published',\n          })}\n        </StatusTab>\n      </Tabs.List>\n    </Tabs.Root>\n  );\n};\n\n/* -------------------------------------------------------------------------------------------------\n * PreviewHeader\n * -----------------------------------------------------------------------------------------------*/\n\nconst UnstablePreviewHeader = () => {\n  const title = usePreviewContext('PreviewHeader', (state) => state.title);\n  const document = usePreviewContext('PreviewHeader', (state) => state.document);\n  const schema = usePreviewContext('PreviewHeader', (state) => state.schema);\n  const meta = usePreviewContext('PreviewHeader', (state) => state.meta);\n  const plugins = useStrapiApp('PreviewHeader', (state) => state.plugins);\n  const iframeRef = usePreviewContext('PreviewHeader', (state) => state.iframeRef);\n\n  const [{ query }] = useQueryParams<{\n    status?: 'draft' | 'published';\n  }>();\n  const { formatMessage } = useIntl();\n  const { toggleNotification } = useNotification();\n  const { copy } = useClipboard();\n\n  const handleCopyLink = () => {\n    copy(window.location.href);\n    toggleNotification({\n      message: formatMessage({\n        id: 'content-manager.preview.copy.success',\n        defaultMessage: 'Copied preview link',\n      }),\n      type: 'success',\n    });\n  };\n\n  const hasDraftAndPublish = schema.options?.draftAndPublish ?? false;\n  const documentActionProps = {\n    activeTab: query.status ?? null,\n    collectionType: schema.kind === 'collectionType' ? 'collection-types' : 'single-types',\n    model: schema.uid,\n    documentId: document.documentId,\n    document,\n    meta,\n    onPreview: () => {\n      iframeRef?.current?.contentWindow?.postMessage(\n        { type: 'strapiUpdate' },\n        // The iframe origin is safe to use since it must be provided through the allowedOrigins config\n        new URL(iframeRef.current.src).origin\n      );\n    },\n  } satisfies DocumentActionProps;\n\n  return (\n    <Flex height=\"48px\" gap={4} background=\"neutral0\" borderColor=\"neutral150\" tag=\"header\">\n      {/* Title and status */}\n      <TitleContainer height=\"100%\" paddingLeft={2} paddingRight={4}>\n        <ClosePreviewButton />\n        <PreviewTitle\n          tag=\"h1\"\n          title={title}\n          maxWidth=\"200px\"\n          fontSize={2}\n          paddingLeft={2}\n          paddingRight={3}\n          fontWeight={600}\n        >\n          {title}\n        </PreviewTitle>\n        <Status />\n      </TitleContainer>\n\n      {/* Tabs and actions */}\n      <Flex\n        flex={1}\n        paddingRight={2}\n        gap={2}\n        justifyContent={hasDraftAndPublish ? 'space-between' : 'flex-end'}\n      >\n        <Flex flex=\"1 1 70%\">\n          <PreviewTabs />\n        </Flex>\n        <Flex gap={2}>\n          <IconButton\n            type=\"button\"\n            label={formatMessage({\n              id: 'preview.copy.label',\n              defaultMessage: 'Copy preview link',\n            })}\n            onClick={handleCopyLink}\n          >\n            <LinkIcon />\n          </IconButton>\n          <InjectionZone area=\"preview.actions\" />\n          <DescriptionComponentRenderer\n            props={documentActionProps}\n            descriptions={(\n              plugins['content-manager'].apis as ContentManagerPlugin['config']['apis']\n            ).getDocumentActions('preview')}\n          >\n            {(actions) => {\n              const filteredActions = actions.filter((action) =>\n                [action.position].flat().includes('preview')\n              );\n              const [primaryAction, secondaryAction] = filteredActions;\n\n              if (!primaryAction && !secondaryAction) return null;\n\n              // Both actions are available when draft and publish enabled\n              if (primaryAction && secondaryAction) {\n                return (\n                  <>\n                    {/* Save */}\n                    <DocumentActionButton\n                      {...secondaryAction}\n                      variant={secondaryAction.variant || 'secondary'}\n                    />\n                    {/* Publish */}\n                    <DocumentActionButton\n                      {...primaryAction}\n                      variant={primaryAction.variant || 'default'}\n                    />\n                  </>\n                );\n              }\n\n              // Otherwise we just have the save action\n              return (\n                <DocumentActionButton\n                  {...primaryAction}\n                  variant={primaryAction.variant || 'secondary'}\n                />\n              );\n            }}\n          </DescriptionComponentRenderer>\n        </Flex>\n      </Flex>\n    </Flex>\n  );\n};\n\nconst PreviewHeader = () => {\n  // Get the document title\n  const title = usePreviewContext('PreviewHeader', (state) => state.title);\n\n  const { formatMessage } = useIntl();\n  const { toggleNotification } = useNotification();\n  const { copy } = useClipboard();\n\n  const handleCopyLink = () => {\n    copy(window.location.href);\n    toggleNotification({\n      message: formatMessage({\n        id: 'content-manager.preview.copy.success',\n        defaultMessage: 'Copied preview link',\n      }),\n      type: 'success',\n    });\n  };\n\n  return (\n    <Grid.Root\n      gap={3}\n      gridCols={3}\n      paddingLeft={2}\n      paddingRight={2}\n      background=\"neutral0\"\n      borderColor=\"neutral150\"\n      tag=\"header\"\n    >\n      {/* Title and status */}\n      <Grid.Item xs={1} paddingTop={2} paddingBottom={2} gap={3}>\n        <ClosePreviewButton />\n        <PreviewTitle tag=\"h1\" fontWeight={600} fontSize={2} maxWidth=\"200px\" title={title}>\n          {title}\n        </PreviewTitle>\n        <Status />\n      </Grid.Item>\n      {/* Tabs */}\n      <Grid.Item xs={1} marginBottom=\"-1px\" alignItems=\"end\" margin=\"auto\">\n        <PreviewTabs />\n      </Grid.Item>\n      {/* Copy link */}\n      <Grid.Item xs={1} justifyContent=\"end\" paddingTop={2} paddingBottom={2}>\n        <IconButton\n          type=\"button\"\n          label={formatMessage({\n            id: 'preview.copy.label',\n            defaultMessage: 'Copy preview link',\n          })}\n          onClick={handleCopyLink}\n        >\n          <LinkIcon />\n        </IconButton>\n      </Grid.Item>\n    </Grid.Root>\n  );\n};\n\nconst PreviewTitle = styled(Typography)`\n  overflow: hidden;\n  text-overflow: ellipsis;\n  white-space: nowrap;\n`;\n\nconst StatusTab = styled(Tabs.Trigger)`\n  text-transform: uppercase;\n`;\n\nconst TitleContainer = styled(Flex)`\n  border-right: 1px solid ${({ theme }) => theme.colors.neutral150};\n`;\n\nexport { PreviewHeader, UnstablePreviewHeader };\n", "import * as React from 'react';\n\nimport {\n  Page,\n  useQueryParams,\n  useRBAC,\n  createContext,\n  Form as FormContext,\n} from '@strapi/admin/strapi-admin';\nimport { Box, Flex, FocusTrap, IconButton, Portal } from '@strapi/design-system';\nimport { ArrowLineLeft } from '@strapi/icons';\nimport { useIntl } from 'react-intl';\nimport { useLocation, useParams } from 'react-router-dom';\nimport { styled } from 'styled-components';\n\nimport { GetPreviewUrl } from '../../../../shared/contracts/preview';\nimport { COLLECTION_TYPES } from '../../constants/collections';\nimport { DocumentRBAC } from '../../features/DocumentRBAC';\nimport { type UseDocument, useDocument } from '../../hooks/useDocument';\nimport { type EditLayout, useDocumentLayout } from '../../hooks/useDocumentLayout';\nimport { FormLayout } from '../../pages/EditView/components/FormLayout';\nimport { buildValidParams } from '../../utils/api';\nimport { createYupSchema } from '../../utils/validation';\nimport { PreviewContent } from '../components/PreviewContent';\nimport { PreviewHeader, UnstablePreviewHeader } from '../components/PreviewHeader';\nimport { useGetPreviewUrlQuery } from '../services/preview';\n\nimport type { UID } from '@strapi/types';\n\n/* -------------------------------------------------------------------------------------------------\n * PreviewProvider\n * -----------------------------------------------------------------------------------------------*/\n\ninterface PreviewContextValue {\n  url: string;\n  title: string;\n  document: NonNullable<ReturnType<UseDocument>['document']>;\n  meta: NonNullable<ReturnType<UseDocument>['meta']>;\n  schema: NonNullable<ReturnType<UseDocument>['schema']>;\n  layout: EditLayout;\n  iframeRef?: React.RefObject<HTMLIFrameElement>;\n}\n\nconst [PreviewProvider, usePreviewContext] = createContext<PreviewContextValue>('PreviewPage');\n\n/* -------------------------------------------------------------------------------------------------\n * PreviewPage\n * -----------------------------------------------------------------------------------------------*/\n\nconst AnimatedArrow = styled(ArrowLineLeft)<{ isSideEditorOpen: boolean }>`\n  will-change: transform;\n  rotate: ${(props) => (props.isSideEditorOpen ? '0deg' : '180deg')};\n  transition: rotate 0.2s ease-in-out;\n`;\n\nconst PreviewPage = () => {\n  const location = useLocation();\n  const { formatMessage } = useIntl();\n\n  const iframeRef = React.useRef<HTMLIFrameElement>(null);\n  const [isSideEditorOpen, setIsSideEditorOpen] = React.useState(true);\n\n  // Read all the necessary data from the URL to find the right preview URL\n  const {\n    slug: model,\n    id: documentId,\n    collectionType,\n  } = useParams<{\n    slug: UID.ContentType;\n    id: string;\n    collectionType: string;\n  }>();\n  const [{ query }] = useQueryParams<{\n    plugins?: Record<string, unknown>;\n    status?: string;\n  }>();\n\n  const params = React.useMemo(() => buildValidParams(query), [query]);\n\n  if (!collectionType) {\n    throw new Error('Could not find collectionType in url params');\n  }\n\n  if (!model) {\n    throw new Error('Could not find model in url params');\n  }\n\n  // Only collection types must have a documentId\n  if (collectionType === COLLECTION_TYPES && !documentId) {\n    throw new Error('Could not find documentId in url params');\n  }\n\n  const previewUrlResponse = useGetPreviewUrlQuery({\n    params: {\n      contentType: model,\n    },\n    query: {\n      documentId,\n      locale: params.locale,\n      status: params.status as GetPreviewUrl.Request['query']['status'],\n    },\n  });\n  const documentResponse = useDocument({\n    model,\n    collectionType,\n    documentId,\n    params,\n  });\n  const documentLayoutResponse = useDocumentLayout(model);\n\n  const isLoading =\n    previewUrlResponse.isLoading || documentLayoutResponse.isLoading || documentResponse.isLoading;\n  if (isLoading && !documentResponse.document?.documentId) {\n    return <Page.Loading />;\n  }\n\n  const initialValues = documentResponse.getInitialFormValues();\n\n  if (\n    previewUrlResponse.error ||\n    documentLayoutResponse.error ||\n    !documentResponse.document ||\n    !documentResponse.meta ||\n    !documentResponse.schema ||\n    !initialValues\n  ) {\n    return <Page.Error />;\n  }\n\n  if (!previewUrlResponse.data?.data?.url) {\n    return <Page.NoData />;\n  }\n\n  const documentTitle = documentResponse.getTitle(documentLayoutResponse.edit.settings.mainField);\n\n  const validateSync = (values: Record<string, unknown>, options: Record<string, string>) => {\n    const yupSchema = createYupSchema(\n      documentResponse.schema?.attributes,\n      documentResponse.components,\n      {\n        status: documentResponse.document?.status,\n        ...options,\n      }\n    );\n\n    return yupSchema.validateSync(values, { abortEarly: false });\n  };\n\n  const previewUrl = previewUrlResponse.data.data.url;\n\n  return (\n    <>\n      <Page.Title>\n        {formatMessage(\n          {\n            id: 'content-manager.preview.page-title',\n            defaultMessage: '{contentType} preview',\n          },\n          {\n            contentType: documentTitle,\n          }\n        )}\n      </Page.Title>\n      <PreviewProvider\n        url={previewUrl}\n        document={documentResponse.document}\n        title={documentTitle}\n        meta={documentResponse.meta}\n        schema={documentResponse.schema}\n        layout={documentLayoutResponse.edit}\n        iframeRef={iframeRef}\n      >\n        <FormContext\n          method=\"PUT\"\n          disabled={\n            query.status === 'published' &&\n            documentResponse &&\n            documentResponse.document.status !== 'draft'\n          }\n          initialValues={documentResponse.getInitialFormValues()}\n          initialErrors={location?.state?.forceValidation ? validateSync(initialValues, {}) : {}}\n          height=\"100%\"\n          validate={(values: Record<string, unknown>, options: Record<string, string>) => {\n            const yupSchema = createYupSchema(\n              documentResponse.schema?.attributes,\n              documentResponse.components,\n              {\n                status: documentResponse.document?.status,\n                ...options,\n              }\n            );\n\n            return yupSchema.validate(values, { abortEarly: false });\n          }}\n        >\n          <Flex direction=\"column\" height=\"100%\" alignItems=\"stretch\">\n            {window.strapi.future.isEnabled('unstablePreviewSideEditor') ? (\n              <>\n                <UnstablePreviewHeader />\n                <Flex flex={1} overflow=\"auto\" alignItems=\"stretch\">\n                  <Box\n                    overflow=\"auto\"\n                    width={isSideEditorOpen ? '50%' : 0}\n                    borderWidth=\"0 1px 0 0\"\n                    borderColor=\"neutral150\"\n                    paddingTop={6}\n                    paddingBottom={6}\n                    // Remove horizontal padding when the editor is closed or it won't fully disappear\n                    paddingLeft={isSideEditorOpen ? 6 : 0}\n                    paddingRight={isSideEditorOpen ? 6 : 0}\n                    transition=\"all 0.2s ease-in-out\"\n                  >\n                    <FormLayout layout={documentLayoutResponse.edit.layout} hasBackground />\n                  </Box>\n                  <Box position=\"relative\" flex={1} height=\"100%\" overflow=\"hidden\">\n                    <Box\n                      data-testid=\"preview-iframe\"\n                      ref={iframeRef}\n                      src={previewUrl}\n                      /**\n                       * For some reason, changing an iframe's src tag causes the browser to add a new item in the\n                       * history stack. This is an issue for us as it means clicking the back button will not let us\n                       * go back to the edit view. To fix it, we need to trick the browser into thinking this is a\n                       * different iframe when the preview URL changes. So we set a key prop to force React\n                       * to mount a different node when the src changes.\n                       */\n                      key={previewUrl}\n                      title={formatMessage({\n                        id: 'content-manager.preview.panel.title',\n                        defaultMessage: 'Preview',\n                      })}\n                      width=\"100%\"\n                      height=\"100%\"\n                      borderWidth={0}\n                      tag=\"iframe\"\n                    />\n                    <IconButton\n                      variant=\"tertiary\"\n                      label={formatMessage(\n                        isSideEditorOpen\n                          ? {\n                              id: 'content-manager.preview.content.close-editor',\n                              defaultMessage: 'Close editor',\n                            }\n                          : {\n                              id: 'content-manager.preview.content.open-editor',\n                              defaultMessage: 'Open editor',\n                            }\n                      )}\n                      onClick={() => setIsSideEditorOpen((prev) => !prev)}\n                      position=\"absolute\"\n                      top={2}\n                      left={2}\n                    >\n                      <AnimatedArrow isSideEditorOpen={isSideEditorOpen} />\n                    </IconButton>\n                  </Box>\n                </Flex>\n              </>\n            ) : (\n              <>\n                <PreviewHeader />\n                <PreviewContent />\n              </>\n            )}\n          </Flex>\n        </FormContext>\n      </PreviewProvider>\n    </>\n  );\n};\n\n/* -------------------------------------------------------------------------------------------------\n * ProtectedPreviewPage\n * -----------------------------------------------------------------------------------------------*/\n\nconst ProtectedPreviewPageImpl = () => {\n  const { slug: model } = useParams<{\n    slug: string;\n  }>();\n  const {\n    permissions = [],\n    isLoading,\n    error,\n  } = useRBAC([\n    { action: 'plugin::content-manager.explorer.read', subject: model },\n    { action: 'plugin::content-manager.explorer.update', subject: model },\n    { action: 'plugin::content-manager.explorer.publish', subject: model },\n  ]);\n\n  if (isLoading) {\n    return <Page.Loading />;\n  }\n\n  if (error || !model) {\n    return (\n      <Box\n        height=\"100vh\"\n        width=\"100vw\"\n        position=\"fixed\"\n        top={0}\n        left={0}\n        zIndex={2}\n        background=\"neutral0\"\n      >\n        <Page.Error />\n      </Box>\n    );\n  }\n\n  return (\n    <Box\n      height=\"100vh\"\n      width=\"100vw\"\n      position=\"fixed\"\n      top={0}\n      left={0}\n      zIndex={2}\n      background=\"neutral0\"\n    >\n      <Page.Protect\n        permissions={permissions.filter((permission) =>\n          permission.action.includes('explorer.read')\n        )}\n      >\n        <DocumentRBAC permissions={permissions}>\n          <PreviewPage />\n        </DocumentRBAC>\n      </Page.Protect>\n    </Box>\n  );\n};\n\nconst ProtectedPreviewPage = () => {\n  return (\n    <Portal>\n      <FocusTrap>\n        <ProtectedPreviewPageImpl />\n      </FocusTrap>\n    </Portal>\n  );\n};\n\nexport { ProtectedPreviewPage, usePreviewContext };\n"],
  "mappings": "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",
  "names": ["PreviewContent", "previewUrl", "usePreviewContext", "state", "url", "formatMessage", "useIntl", "_jsx", "Box", "src", "title", "id", "defaultMessage", "width", "height", "borderWidth", "tag", "ClosePreviewButton", "query", "useQueryParams", "canGoBack", "useHistory", "goBack", "history", "locationIndex", "currentLocationIndex", "historyTo", "at", "undefined", "fallback", "pathname", "search", "stringify", "encode", "toWithFallback", "handleClick", "e", "preventDefault", "IconButton", "variant", "Link", "relative", "to", "onClick", "label", "Cross", "Status", "document", "schema", "meta", "hasDraftAndPublished", "options", "draftAndPublish", "status", "getDocumentStatus", "DocumentStatus", "size", "PreviewTabs", "setQuery", "hasDraftAndPublish", "documentStatus", "handleTabChange", "Tabs", "Root", "value", "onValueChange", "_jsxs", "List", "aria-label", "StatusTab", "disabled", "UnstablePreviewHeader", "plugins", "useStrapiApp", "iframeRef", "toggleNotification", "useNotification", "copy", "useClipboard", "handleCopyLink", "window", "location", "href", "message", "type", "documentActionProps", "activeTab", "collectionType", "kind", "model", "uid", "documentId", "onPreview", "current", "contentWindow", "postMessage", "URL", "origin", "Flex", "gap", "background", "borderColor", "TitleContainer", "paddingLeft", "paddingRight", "PreviewTitle", "maxWidth", "fontSize", "fontWeight", "flex", "justifyContent", "LinkIcon", "InjectionZone", "area", "DescriptionComponentRenderer", "props", "descriptions", "apis", "getDocumentActions", "actions", "filteredActions", "filter", "action", "position", "flat", "includes", "primaryAction", "secondaryAction", "_Fragment", "DocumentActionButton", "PreviewHeader", "Grid", "gridCols", "Item", "xs", "paddingTop", "paddingBottom", "marginBottom", "alignItems", "margin", "styled", "Typography", "Trigger", "theme", "colors", "neutral150", "PreviewProvider", "createContext", "AnimatedArrow", "ArrowLineLeft", "isSideEditorOpen", "PreviewPage", "useLocation", "useRef", "setIsSideEditorOpen", "useState", "slug", "useParams", "params", "useMemo", "buildValidParams", "Error", "COLLECTION_TYPES", "previewUrlResponse", "useGetPreviewUrlQuery", "contentType", "locale", "documentResponse", "useDocument", "documentLayoutResponse", "useDocumentLayout", "isLoading", "Page", "Loading", "initialValues", "getInitialFormValues", "error", "data", "NoData", "documentTitle", "getTitle", "edit", "settings", "mainField", "validateSync", "values", "yupSchema", "createYupSchema", "attributes", "components", "abortEarly", "Title", "layout", "FormContext", "method", "initialErrors", "forceValidation", "validate", "direction", "strapi", "future", "isEnabled", "overflow", "transition", "FormLayout", "hasBackground", "data-testid", "ref", "prev", "top", "left", "ProtectedPreviewPageImpl", "permissions", "useRBAC", "subject", "zIndex", "Protect", "permission", "DocumentRBAC", "ProtectedPreviewPage", "Portal", "FocusTrap"]
}
