import {
  HTML5Backend
} from "./chunk-G63TEG66.js";
import {
  PrivateRoute
} from "./chunk-EBP36B7K.js";
import {
  LAYOUT_DATA,
  Number,
  STATES,
  VerticalDivider
} from "./chunk-CBG574XG.js";
import {
  require_lt,
  require_valid
} from "./chunk-WAJBRAZM.js";
import {
  useOnce
} from "./chunk-QHVJ3AKW.js";
import {
  DndProvider
} from "./chunk-ORV5KVBM.js";
import {
  require_cloneDeep
} from "./chunk-O2B3MFGH.js";
import {
  getDisplayName,
  hashAdminUserEmail
} from "./chunk-TZFALS62.js";
import {
  NpsSurvey,
  require_browser,
  require_camelCase,
  require_merge,
  require_omit,
  require_pick,
  require_throttle
} from "./chunk-3YNLZXAY.js";
import {
  AppInfoProvider,
  Page,
  require_defaultsDeep,
  require_isEqual,
  require_set,
  useAuth,
  useConfiguration,
  useGuidedTour,
  useStrapiApp,
  useTracking,
  useTypedSelector
} from "./chunk-7O432AQ6.js";
import {
  AccessibleIcon,
  Avatar,
  Badge,
  Box,
  Button,
  Divider,
  Flex,
  FocusTrap,
  IconButton,
  LinkButton,
  Menu,
  Portal$1,
  SkipToContent,
  TooltipImpl,
  Typography,
  VisuallyHidden,
  fn,
  require_clone,
  require_get,
  require_isFunction,
  require_lib,
  require_pipe,
  require_toPath,
  require_trimEnd,
  useCollator,
  useInformationQuery,
  useIntl
} from "./chunk-TWYY2DQ2.js";
import {
  require_client
} from "./chunk-5ZC4PE57.js";
import {
  NavLink,
  Outlet,
  useLocation,
  useNavigate
} from "./chunk-TUXTO2Z5.js";
import "./chunk-FOD4ENRR.js";
import {
  ForwardRef$2N,
  ForwardRef$2t,
  ForwardRef$45,
  ForwardRef$4d,
  ForwardRef$5d,
  ForwardRef$N,
  ForwardRef$P
} from "./chunk-2CB2WHZW.js";
import {
  require_jsx_runtime
} from "./chunk-NIAJZ5MX.js";
import {
  dt
} from "./chunk-UUQJ2KNI.js";
import {
  require_react
} from "./chunk-MADUDGYZ.js";
import {
  __toESM
} from "./chunk-PLDDJCW6.js";

// node_modules/@strapi/admin/dist/admin/chunks/AuthenticatedLayout-CL0_UBdl.mjs
var import_jsx_runtime = __toESM(require_jsx_runtime(), 1);
var React = __toESM(require_react(), 1);

// node_modules/@strapi/admin/package.json
var package_default = {
  name: "@strapi/admin",
  version: "5.11.2",
  description: "Strapi Admin",
  repository: {
    type: "git",
    url: "git://github.com/strapi/strapi.git"
  },
  license: "SEE LICENSE IN LICENSE",
  author: {
    name: "Strapi Solutions SAS",
    email: "hi@strapi.io",
    url: "https://strapi.io"
  },
  maintainers: [
    {
      name: "Strapi Solutions SAS",
      email: "hi@strapi.io",
      url: "https://strapi.io"
    }
  ],
  exports: {
    "./strapi-admin": {
      types: "./dist/admin/src/index.d.ts",
      source: "./admin/src/index.ts",
      import: "./dist/admin/index.mjs",
      require: "./dist/admin/index.js",
      default: "./dist/admin/index.js"
    },
    "./strapi-admin/ee": {
      types: "./dist/admin/src/ee.d.ts",
      source: "./admin/src/ee.ts",
      import: "./dist/admin/ee.mjs",
      require: "./dist/admin/ee.js",
      default: "./dist/admin/ee.js"
    },
    "./strapi-admin/test": {
      types: "./dist/admin/tests/index.d.ts",
      source: "./admin/tests/index.ts",
      import: "./dist/admin/test.mjs",
      require: "./dist/admin/test.js",
      default: "./dist/admin/test.js"
    },
    "./_internal": {
      types: "./dist/_internal/index.d.ts",
      source: "./_internal/index.ts",
      import: "./dist/_internal.mjs",
      require: "./dist/_internal.js",
      default: "./dist/_internal.js"
    },
    "./strapi-server": {
      types: "./dist/server/src/index.d.ts",
      source: "./server/src/index.js",
      import: "./dist/server/index.mjs",
      require: "./dist/server/index.js",
      default: "./dist/server/index.js"
    },
    "./package.json": "./package.json"
  },
  files: [
    "dist/"
  ],
  scripts: {
    build: "run -T npm-run-all clean --parallel build:code build:types",
    "build:code": "run -T rollup -c",
    "build:types": "run -T run-p build:types:server build:types:admin build:types:internals",
    "build:types:internals": "run -T tsc -p tsconfig.build.json --emitDeclarationOnly",
    "build:types:server": "run -T tsc -p server/tsconfig.build.json --emitDeclarationOnly",
    "build:types:admin": "run -T tsc -p admin/tsconfig.build.json --emitDeclarationOnly",
    clean: "run -T rimraf ./dist",
    lint: "run -T eslint .",
    "test:front": "run -T cross-env IS_EE=true jest --config ./jest.config.front.js",
    "test:front:watch": "run -T cross-env IS_EE=true jest --config ./jest.config.front.js --watchAll",
    "test:ts": "run -T tsc -p tsconfig.json",
    "test:ts:back": "run -T tsc --noEmit -p server/tsconfig.json",
    "test:ts:front": "run -T tsc -p admin/tsconfig.json && run -T tsc -p ee/admin/tsconfig.json",
    "test:unit": "run -T jest",
    "test:unit:watch": "run -T jest --watch",
    watch: "run -T rollup -c -w"
  },
  dependencies: {
    "@casl/ability": "6.5.0",
    "@internationalized/date": "3.5.4",
    "@radix-ui/react-context": "1.0.1",
    "@radix-ui/react-toolbar": "1.0.4",
    "@reduxjs/toolkit": "1.9.7",
    "@strapi/design-system": "2.0.0-rc.18",
    "@strapi/icons": "2.0.0-rc.18",
    "@strapi/permissions": "5.11.2",
    "@strapi/types": "5.11.2",
    "@strapi/typescript-utils": "5.11.2",
    "@strapi/utils": "5.11.2",
    "@testing-library/dom": "10.1.0",
    "@testing-library/react": "15.0.7",
    "@testing-library/user-event": "14.5.2",
    axios: "1.8.2",
    bcryptjs: "2.4.3",
    boxen: "5.1.2",
    chalk: "^4.1.2",
    codemirror5: "npm:codemirror@^5.65.11",
    "cross-env": "^7.0.3",
    "date-fns": "2.30.0",
    execa: "5.1.1",
    "fast-deep-equal": "3.1.3",
    formik: "2.4.5",
    "fractional-indexing": "3.2.0",
    "fs-extra": "11.2.0",
    "highlight.js": "^10.4.1",
    immer: "9.0.21",
    inquirer: "8.2.5",
    invariant: "^2.2.4",
    "is-localhost-ip": "2.0.0",
    jsonwebtoken: "9.0.0",
    koa: "2.15.4",
    "koa-compose": "4.1.0",
    "koa-passport": "6.0.0",
    "koa-static": "5.0.0",
    "koa2-ratelimit": "^1.1.3",
    lodash: "4.17.21",
    "node-schedule": "2.1.1",
    ora: "5.4.1",
    "p-map": "4.0.0",
    "passport-local": "1.0.0",
    pluralize: "8.0.0",
    punycode: "2.3.1",
    qs: "6.11.1",
    "react-dnd": "16.0.1",
    "react-dnd-html5-backend": "16.0.1",
    "react-intl": "6.6.2",
    "react-is": "^18.2.0",
    "react-query": "3.39.3",
    "react-redux": "8.1.3",
    "react-select": "5.8.0",
    "react-window": "1.8.10",
    rimraf: "5.0.5",
    "sanitize-html": "2.13.0",
    scheduler: "0.23.0",
    semver: "7.5.4",
    sift: "16.0.1",
    typescript: "5.4.4",
    "use-context-selector": "1.4.1",
    yup: "0.32.9",
    zod: "^3.22.4"
  },
  devDependencies: {
    "@strapi/admin-test-utils": "5.11.2",
    "@strapi/data-transfer": "5.11.2",
    "@types/codemirror5": "npm:@types/codemirror@^5.60.15",
    "@types/fs-extra": "11.0.4",
    "@types/invariant": "2.2.36",
    "@types/jsonwebtoken": "9.0.3",
    "@types/koa-passport": "6.0.1",
    "@types/lodash": "^4.14.191",
    "@types/markdown-it": "13.0.7",
    "@types/markdown-it-container": "2.0.9",
    "@types/markdown-it-emoji": "2.0.4",
    "@types/markdown-it-footnote": "3.0.3",
    "@types/passport-local": "1.0.36",
    "@types/pluralize": "0.0.32",
    "@types/punycode": "2.1.4",
    "@types/react-window": "1.8.8",
    "@types/sanitize-html": "2.13.0",
    "@vitejs/plugin-react-swc": "3.6.0",
    "koa-body": "6.0.1",
    msw: "1.3.0",
    react: "18.3.1",
    "react-dom": "18.3.1",
    "react-router-dom": "6.22.3",
    "styled-components": "6.1.8",
    vite: "5.4.13",
    "vite-plugin-dts": "^4.3.0"
  },
  peerDependencies: {
    "@strapi/data-transfer": "^5.0.0",
    react: "^17.0.0 || ^18.0.0",
    "react-dom": "^17.0.0 || ^18.0.0",
    "react-router-dom": "^6.0.0",
    "styled-components": "^6.0.0"
  },
  engines: {
    node: ">=18.0.0 <=22.x.x",
    npm: ">=6.0.0"
  },
  nx: {
    targets: {
      build: {
        outputs: [
          "{projectRoot}/build"
        ]
      }
    }
  }
};

// node_modules/@strapi/admin/dist/admin/chunks/AuthenticatedLayout-CL0_UBdl.mjs
var import_lt = __toESM(require_lt(), 1);
var import_valid = __toESM(require_valid(), 1);
var import_get = __toESM(require_get(), 1);
var import_cloneDeep = __toESM(require_cloneDeep(), 1);
var import_qs = __toESM(require_lib(), 1);
var import_clone = __toESM(require_clone(), 1);
var import_toPath = __toESM(require_toPath(), 1);
var import_isEqual = __toESM(require_isEqual(), 1);
var import_set = __toESM(require_set(), 1);
var import_defaultsDeep = __toESM(require_defaultsDeep(), 1);
var import_client = __toESM(require_client(), 1);
var import_invariant = __toESM(require_browser(), 1);
var import_isFunction = __toESM(require_isFunction(), 1);
var import_merge = __toESM(require_merge(), 1);
var import_pick = __toESM(require_pick(), 1);
var import_camelCase = __toESM(require_camelCase(), 1);
var import_omit = __toESM(require_omit(), 1);
var import_throttle = __toESM(require_throttle(), 1);
var import_trimEnd = __toESM(require_trimEnd(), 1);
var import_pipe = __toESM(require_pipe(), 1);
var GuidedTourModal = () => {
  const guidedTour = useGuidedTour("GuidedTourModal", (state) => state);
  const { currentStep, guidedTourState, setCurrentStep, setStepState, isGuidedTourVisible, setSkipped } = guidedTour;
  const { formatMessage } = useIntl();
  const { trackUsage } = useTracking();
  if (!currentStep || !isGuidedTourVisible) {
    return null;
  }
  const stepData = (0, import_get.default)(LAYOUT_DATA, currentStep);
  const sectionKeys = Object.keys(guidedTourState);
  const [sectionName, stepName] = currentStep.split(".");
  const sectionIndex = sectionKeys.indexOf(sectionName);
  const stepIndex = Object.keys(guidedTourState[sectionName]).indexOf(stepName);
  const hasSectionAfter = sectionIndex < sectionKeys.length - 1;
  const hasStepAfter = stepIndex < Object.keys(guidedTourState[sectionName]).length - 1;
  const handleCtaClick = () => {
    setStepState(currentStep, true);
    if (stepData) {
      trackUsage(stepData.trackingEvent);
    }
    setCurrentStep(null);
  };
  const handleSkip = () => {
    setSkipped(true);
    setCurrentStep(null);
    trackUsage("didSkipGuidedtour");
  };
  return (0, import_jsx_runtime.jsx)(Portal$1, {
    children: (0, import_jsx_runtime.jsx)(ModalWrapper, {
      onClick: handleCtaClick,
      padding: 8,
      justifyContent: "center",
      children: (0, import_jsx_runtime.jsx)(FocusTrap, {
        onEscape: handleCtaClick,
        children: (0, import_jsx_runtime.jsxs)(Flex, {
          direction: "column",
          alignItems: "stretch",
          background: "neutral0",
          width: `66rem`,
          shadow: "popupShadow",
          hasRadius: true,
          padding: 4,
          gap: 8,
          role: "dialog",
          "aria-modal": true,
          onClick: (e) => e.stopPropagation(),
          children: [
            (0, import_jsx_runtime.jsx)(Flex, {
              justifyContent: "flex-end",
              children: (0, import_jsx_runtime.jsx)(IconButton, {
                onClick: handleCtaClick,
                withTooltip: false,
                label: formatMessage({
                  id: "app.utils.close-label",
                  defaultMessage: "Close"
                }),
                children: (0, import_jsx_runtime.jsx)(ForwardRef$45, {})
              })
            }),
            (0, import_jsx_runtime.jsx)(Box, {
              paddingLeft: 7,
              paddingRight: 7,
              paddingBottom: !hasStepAfter && !hasSectionAfter ? 8 : 0,
              children: (0, import_jsx_runtime.jsx)(GuidedTourStepper, {
                title: stepData && "title" in stepData ? stepData.title : void 0,
                cta: stepData && "cta" in stepData ? stepData.cta : void 0,
                onCtaClick: handleCtaClick,
                sectionIndex,
                stepIndex,
                hasSectionAfter,
                children: stepData && "content" in stepData && (0, import_jsx_runtime.jsx)(GuidedTourContent, {
                  ...stepData.content
                })
              })
            }),
            !(!hasStepAfter && !hasSectionAfter) && (0, import_jsx_runtime.jsx)(Flex, {
              justifyContent: "flex-end",
              children: (0, import_jsx_runtime.jsx)(Button, {
                variant: "tertiary",
                onClick: handleSkip,
                children: formatMessage({
                  id: "app.components.GuidedTour.skip",
                  defaultMessage: "Skip the tour"
                })
              })
            })
          ]
        })
      })
    })
  });
};
var ModalWrapper = dt(Flex)`
  position: fixed;
  z-index: 4;
  inset: 0;
  /* this is theme.colors.neutral800 with opacity */
  background: ${({ theme }) => `${theme.colors.neutral800}1F`};
`;
var GuidedTourStepper = ({ title, children, cta, onCtaClick, sectionIndex, stepIndex, hasSectionAfter }) => {
  const { formatMessage } = useIntl();
  const hasSectionBefore = sectionIndex > 0;
  const hasStepsBefore = stepIndex > 0;
  const nextSectionIndex = sectionIndex + 1;
  return (0, import_jsx_runtime.jsxs)(import_jsx_runtime.Fragment, {
    children: [
      (0, import_jsx_runtime.jsxs)(Flex, {
        alignItems: "stretch",
        children: [
          (0, import_jsx_runtime.jsx)(Flex, {
            marginRight: 8,
            justifyContent: "center",
            minWidth: `3rem`,
            children: hasSectionBefore && (0, import_jsx_runtime.jsx)(VerticalDivider, {
              state: STATES.IS_DONE,
              minHeight: `2.4rem`
            })
          }),
          (0, import_jsx_runtime.jsx)(Typography, {
            variant: "sigma",
            textColor: "primary600",
            children: formatMessage({
              id: "app.components.GuidedTour.title",
              defaultMessage: "3 steps to get started"
            })
          })
        ]
      }),
      (0, import_jsx_runtime.jsxs)(Flex, {
        children: [
          (0, import_jsx_runtime.jsx)(Flex, {
            marginRight: 8,
            minWidth: `3rem`,
            children: (0, import_jsx_runtime.jsx)(Number, {
              state: hasStepsBefore ? STATES.IS_DONE : STATES.IS_ACTIVE,
              paddingTop: 3,
              paddingBottom: 3,
              children: sectionIndex + 1
            })
          }),
          title && (0, import_jsx_runtime.jsx)(Typography, {
            variant: "alpha",
            fontWeight: "bold",
            textColor: "neutral800",
            tag: "h3",
            id: "title",
            children: formatMessage(title)
          })
        ]
      }),
      (0, import_jsx_runtime.jsxs)(Flex, {
        alignItems: "stretch",
        children: [
          (0, import_jsx_runtime.jsx)(Flex, {
            marginRight: 8,
            direction: "column",
            justifyContent: "center",
            minWidth: `3rem`,
            children: hasSectionAfter && (0, import_jsx_runtime.jsxs)(import_jsx_runtime.Fragment, {
              children: [
                (0, import_jsx_runtime.jsx)(VerticalDivider, {
                  state: STATES.IS_DONE
                }),
                hasStepsBefore && (0, import_jsx_runtime.jsx)(Number, {
                  state: STATES.IS_ACTIVE,
                  paddingTop: 3,
                  children: nextSectionIndex + 1
                })
              ]
            })
          }),
          (0, import_jsx_runtime.jsxs)(Box, {
            children: [
              children,
              cta && (cta.target ? (0, import_jsx_runtime.jsx)(LinkButton, {
                tag: NavLink,
                endIcon: (0, import_jsx_runtime.jsx)(ForwardRef$5d, {}),
                onClick: onCtaClick,
                to: cta.target,
                children: formatMessage(cta.title)
              }) : (0, import_jsx_runtime.jsx)(Button, {
                endIcon: (0, import_jsx_runtime.jsx)(ForwardRef$5d, {}),
                onClick: onCtaClick,
                children: formatMessage(cta.title)
              }))
            ]
          })
        ]
      }),
      hasStepsBefore && hasSectionAfter && (0, import_jsx_runtime.jsx)(Box, {
        paddingTop: 3,
        children: (0, import_jsx_runtime.jsx)(Flex, {
          marginRight: 8,
          justifyContent: "center",
          width: `3rem`,
          children: (0, import_jsx_runtime.jsx)(VerticalDivider, {
            state: STATES.IS_DONE,
            minHeight: `2.4rem`
          })
        })
      })
    ]
  });
};
var GuidedTourContent = ({ id, defaultMessage }) => {
  const { formatMessage } = useIntl();
  return (0, import_jsx_runtime.jsx)(Flex, {
    direction: "column",
    alignItems: "stretch",
    gap: 4,
    paddingBottom: 6,
    children: formatMessage({
      id,
      defaultMessage
    }, {
      documentationLink: DocumentationLink,
      b: Bold,
      p: Paragraph,
      light: Light,
      ul: List,
      li: ListItem
    })
  });
};
var DocumentationLink = (children) => (0, import_jsx_runtime.jsx)(Typography, {
  tag: "a",
  textColor: "primary600",
  target: "_blank",
  rel: "noopener noreferrer",
  href: "https://docs.strapi.io/developer-docs/latest/developer-resources/database-apis-reference/rest-api.html#api-parameters",
  children
});
var Bold = (children) => (0, import_jsx_runtime.jsx)(Typography, {
  fontWeight: "semiBold",
  children
});
var Paragraph = (children) => (0, import_jsx_runtime.jsx)(Typography, {
  children
});
var Light = (children) => (0, import_jsx_runtime.jsx)(Typography, {
  textColor: "neutral600",
  children
});
var List = (children) => (0, import_jsx_runtime.jsx)(Box, {
  paddingLeft: 6,
  children: (0, import_jsx_runtime.jsx)("ul", {
    children
  })
});
var LiStyled = dt.li`
  list-style: disc;
  &::marker {
    color: ${({ theme }) => theme.colors.neutral800};
  }
`;
var ListItem = (children) => (0, import_jsx_runtime.jsx)(LiStyled, {
  children
});
var MainNavWrapper = dt(Flex)`
  border-right: 1px solid ${({ theme }) => theme.colors.neutral150};
`;
var MainNav = (props) => (0, import_jsx_runtime.jsx)(MainNavWrapper, {
  alignItems: "normal",
  tag: "nav",
  background: "neutral0",
  direction: "column",
  height: "100vh",
  position: "sticky",
  top: 0,
  zIndex: 2,
  width: 10,
  ...props
});
var BrandIconWrapper = dt(Flex)`
  svg,
  img {
    border-radius: ${({ theme }) => theme.borderRadius};
    object-fit: contain;
    height: 2.4rem;
    width: 2.4rem;
  }
`;
var NavBrand = () => {
  var _a;
  const { formatMessage } = useIntl();
  const { logos: { menu } } = useConfiguration("LeftMenu");
  return (0, import_jsx_runtime.jsx)(Box, {
    padding: 3,
    children: (0, import_jsx_runtime.jsxs)(BrandIconWrapper, {
      direction: "column",
      justifyContent: "center",
      width: "3.2rem",
      height: "3.2rem",
      children: [
        (0, import_jsx_runtime.jsx)("img", {
          src: ((_a = menu.custom) == null ? void 0 : _a.url) || menu.default,
          alt: formatMessage({
            id: "app.components.LeftMenu.logo.alt",
            defaultMessage: "Application logo"
          }),
          width: "100%",
          height: "100%"
        }),
        (0, import_jsx_runtime.jsxs)(VisuallyHidden, {
          children: [
            (0, import_jsx_runtime.jsx)("span", {
              children: formatMessage({
                id: "app.components.LeftMenu.navbrand.title",
                defaultMessage: "Strapi Dashboard"
              })
            }),
            (0, import_jsx_runtime.jsx)("span", {
              children: formatMessage({
                id: "app.components.LeftMenu.navbrand.workplace",
                defaultMessage: "Workplace"
              })
            })
          ]
        })
      ]
    })
  });
};
var MainNavLinkWrapper = dt(NavLink)`
  text-decoration: none;
  display: flex;
  border-radius: ${({ theme }) => theme.borderRadius};
  background: ${({ theme }) => theme.colors.neutral0};
  color: ${({ theme }) => theme.colors.neutral500};
  position: relative;
  width: fit-content;
  padding-block: 0.6rem;
  padding-inline: 0.6rem;

  &:hover {
    svg path {
      fill: ${({ theme }) => theme.colors.neutral600};
    }
    background: ${({ theme }) => theme.colors.neutral100};
  }

  &.active {
    svg path {
      fill: ${({ theme }) => theme.colors.primary600};
    }
    background: ${({ theme }) => theme.colors.primary100};
  }
`;
var LinkImpl = ({ children, ...props }) => {
  return (0, import_jsx_runtime.jsx)(MainNavLinkWrapper, {
    ...props,
    children
  });
};
var TooltipImpl2 = ({ children, label, position = "right" }) => {
  return (0, import_jsx_runtime.jsx)(TooltipImpl, {
    side: position,
    label,
    delayDuration: 0,
    children: (0, import_jsx_runtime.jsx)("span", {
      children
    })
  });
};
var IconImpl = ({ label, children }) => {
  if (!children) {
    return null;
  }
  return (0, import_jsx_runtime.jsx)(AccessibleIcon, {
    label,
    children
  });
};
var CustomBadge = dt(Badge)`
  /* override default badge styles to change the border radius of the Base element in the Design System */
  border-radius: ${({ theme }) => theme.spaces[10]};
  height: 2rem;
`;
var BadgeImpl = ({ children, label, ...props }) => {
  if (!children) {
    return null;
  }
  return (0, import_jsx_runtime.jsx)(CustomBadge, {
    position: "absolute",
    top: "-0.8rem",
    left: "1.7rem",
    "aria-label": label,
    active: false,
    ...props,
    children
  });
};
var NavLink2 = {
  Link: LinkImpl,
  Tooltip: TooltipImpl2,
  Icon: IconImpl,
  Badge: BadgeImpl
};
var MenuTrigger = dt(Menu.Trigger)`
  height: ${({ theme }) => theme.spaces[7]};
  width: ${({ theme }) => theme.spaces[7]};
  border: none;
  border-radius: 50%;
  // Removes inherited 16px padding
  padding: 0;
  // Prevent empty pixel from appearing below the main nav
  overflow: hidden;
`;
var MenuContent = dt(Menu.Content)`
  left: ${({ theme }) => theme.spaces[3]};
`;
var MenuItem = dt(Menu.Item)`
  & > span {
    width: 100%;
    display: flex;
    align-items: center;
    gap: ${({ theme }) => theme.spaces[3]};
    justify-content: space-between;
  }
`;
var MenuItemDanger = dt(MenuItem)`
  &:hover {
    ${({ theme }) => `
    background: ${theme.colors.danger100};
  `}
  }
`;
var NavUser = ({ children, initials, ...props }) => {
  const { formatMessage } = useIntl();
  const navigate = useNavigate();
  const logout = useAuth("Logout", (state) => state.logout);
  const handleProfile = () => {
    navigate("/me");
  };
  const handleLogout = () => {
    logout();
    navigate("/auth/login");
  };
  return (0, import_jsx_runtime.jsx)(Flex, {
    justifyContent: "center",
    padding: 3,
    borderStyle: "solid",
    borderWidth: "1px 0 0 0",
    borderColor: "neutral150",
    ...props,
    children: (0, import_jsx_runtime.jsxs)(Menu.Root, {
      children: [
        (0, import_jsx_runtime.jsxs)(MenuTrigger, {
          endIcon: null,
          fullWidth: true,
          justifyContent: "center",
          children: [
            (0, import_jsx_runtime.jsx)(Avatar.Item, {
              delayMs: 0,
              fallback: initials
            }),
            (0, import_jsx_runtime.jsx)(VisuallyHidden, {
              tag: "span",
              children
            })
          ]
        }),
        (0, import_jsx_runtime.jsxs)(MenuContent, {
          popoverPlacement: "top-center",
          zIndex: 3,
          children: [
            (0, import_jsx_runtime.jsx)(MenuItem, {
              onSelect: handleProfile,
              children: formatMessage({
                id: "global.profile",
                defaultMessage: "Profile"
              })
            }),
            (0, import_jsx_runtime.jsxs)(MenuItemDanger, {
              onSelect: handleLogout,
              color: "danger600",
              children: [
                formatMessage({
                  id: "app.components.LeftMenu.logout",
                  defaultMessage: "Logout"
                }),
                (0, import_jsx_runtime.jsx)(ForwardRef$N, {})
              ]
            })
          ]
        })
      ]
    })
  });
};
var sortLinks = (links) => {
  return links.sort((a, b) => {
    const positionA = a.position ?? 6;
    const positionB = b.position ?? 6;
    if (positionA < positionB) {
      return -1;
    } else {
      return 1;
    }
  });
};
var NavLinkBadgeCounter = dt(NavLink2.Badge)`
  span {
    color: ${({ theme }) => theme.colors.neutral0};
  }
`;
var NavLinkBadgeLock = dt(NavLink2.Badge)`
  background-color: transparent;
`;
var NavListWrapper = dt(Flex)`
  overflow-y: auto;
`;
var LeftMenu = ({ generalSectionLinks, pluginsSectionLinks }) => {
  const user = useAuth("AuthenticatedApp", (state) => state.user);
  const { trackUsage } = useTracking();
  const { pathname } = useLocation();
  const userDisplayName = getDisplayName(user);
  const { formatMessage, locale } = useIntl();
  const formatter = useCollator(locale, {
    sensitivity: "base"
  });
  const initials = userDisplayName.split(" ").map((name) => name.substring(0, 1)).join("").substring(0, 2);
  const handleClickOnLink = (destination) => {
    trackUsage("willNavigate", {
      from: pathname,
      to: destination
    });
  };
  const listLinksAlphabeticallySorted = [
    ...pluginsSectionLinks,
    ...generalSectionLinks
  ].sort((a, b) => formatter.compare(formatMessage(a.intlLabel), formatMessage(b.intlLabel)));
  const listLinks = sortLinks(listLinksAlphabeticallySorted);
  return (0, import_jsx_runtime.jsxs)(MainNav, {
    children: [
      (0, import_jsx_runtime.jsx)(NavBrand, {}),
      (0, import_jsx_runtime.jsx)(Divider, {}),
      (0, import_jsx_runtime.jsx)(NavListWrapper, {
        tag: "ul",
        gap: 3,
        direction: "column",
        flex: 1,
        paddingTop: 3,
        paddingBottom: 3,
        children: listLinks.length > 0 ? listLinks.map((link) => {
          const LinkIcon = link.icon;
          const badgeContentLock = (link == null ? void 0 : link.licenseOnly) ? (0, import_jsx_runtime.jsx)(ForwardRef$2t, {
            fill: "warning500"
          }) : void 0;
          const badgeContentNumeric = link.notificationsCount && link.notificationsCount > 0 ? link.notificationsCount.toString() : void 0;
          const labelValue = formatMessage(link.intlLabel);
          return (0, import_jsx_runtime.jsx)(Flex, {
            tag: "li",
            children: (0, import_jsx_runtime.jsx)(NavLink2.Tooltip, {
              label: labelValue,
              children: (0, import_jsx_runtime.jsxs)(NavLink2.Link, {
                to: link.to,
                onClick: () => handleClickOnLink(link.to),
                "aria-label": labelValue,
                children: [
                  (0, import_jsx_runtime.jsx)(NavLink2.Icon, {
                    label: labelValue,
                    children: (0, import_jsx_runtime.jsx)(LinkIcon, {
                      width: "20",
                      height: "20",
                      fill: "neutral500"
                    })
                  }),
                  badgeContentLock ? (0, import_jsx_runtime.jsx)(NavLinkBadgeLock, {
                    label: "locked",
                    textColor: "neutral500",
                    paddingLeft: 0,
                    paddingRight: 0,
                    children: badgeContentLock
                  }) : badgeContentNumeric ? (0, import_jsx_runtime.jsx)(NavLinkBadgeCounter, {
                    label: badgeContentNumeric,
                    backgroundColor: "primary600",
                    width: "2.3rem",
                    color: "neutral0",
                    children: badgeContentNumeric
                  }) : null
                ]
              })
            })
          }, link.to);
        }) : null
      }),
      (0, import_jsx_runtime.jsx)(NavUser, {
        initials,
        children: userDisplayName
      })
    ]
  });
};
var PluginsInitializer = ({ children }) => {
  const appPlugins = useStrapiApp("PluginsInitializer", (state) => state.plugins);
  const [{ plugins }, dispatch] = React.useReducer(reducer, initialState, () => init(appPlugins));
  const setPlugin = React.useRef((pluginId) => {
    dispatch({
      type: "SET_PLUGIN_READY",
      pluginId
    });
  });
  const hasApluginNotReady = Object.keys(plugins).some((plugin) => plugins[plugin].isReady === false);
  if (hasApluginNotReady) {
    const initializers = Object.keys(plugins).reduce((acc, current) => {
      const InitializerComponent = plugins[current].initializer;
      if (InitializerComponent) {
        const key = plugins[current].pluginId;
        acc.push((0, import_jsx_runtime.jsx)(InitializerComponent, {
          setPlugin: setPlugin.current
        }, key));
      }
      return acc;
    }, []);
    return (0, import_jsx_runtime.jsxs)(import_jsx_runtime.Fragment, {
      children: [
        initializers,
        (0, import_jsx_runtime.jsx)(Page.Loading, {})
      ]
    });
  }
  return children;
};
var initialState = {
  plugins: {}
};
var reducer = (state = initialState, action) => fn(state, (draftState) => {
  switch (action.type) {
    case "SET_PLUGIN_READY": {
      draftState.plugins[action.pluginId].isReady = true;
      break;
    }
    default:
      return draftState;
  }
});
var init = (plugins) => {
  return {
    plugins
  };
};
var useMenu = (shouldUpdateStrapi) => {
  var _a;
  const checkUserHasPermissions = useAuth("useMenu", (state) => state.checkUserHasPermissions);
  const menu = useStrapiApp("useMenu", (state) => state.menu);
  const permissions = useTypedSelector((state) => state.admin_app.permissions);
  const [menuWithUserPermissions, setMenuWithUserPermissions] = React.useState({
    generalSectionLinks: [
      {
        icon: ForwardRef$2N,
        intlLabel: {
          id: "global.home",
          defaultMessage: "Home"
        },
        to: "/",
        permissions: [],
        position: 0
      },
      {
        icon: ForwardRef$P,
        intlLabel: {
          id: "global.marketplace",
          defaultMessage: "Marketplace"
        },
        to: "/marketplace",
        permissions: ((_a = permissions.marketplace) == null ? void 0 : _a.main) ?? [],
        position: 7
      },
      {
        icon: ForwardRef$4d,
        intlLabel: {
          id: "global.settings",
          defaultMessage: "Settings"
        },
        to: "/settings",
        // Permissions of this link are retrieved in the init phase
        // using the settings menu
        permissions: [],
        notificationsCount: 0,
        position: 9
      }
    ],
    pluginsSectionLinks: [],
    isLoading: true
  });
  const generalSectionLinksRef = React.useRef(menuWithUserPermissions.generalSectionLinks);
  React.useEffect(() => {
    async function applyMenuPermissions() {
      const authorizedPluginSectionLinks = await getPluginSectionLinks(menu, checkUserHasPermissions);
      const authorizedGeneralSectionLinks = await getGeneralLinks(generalSectionLinksRef.current, shouldUpdateStrapi, checkUserHasPermissions);
      setMenuWithUserPermissions((state) => ({
        ...state,
        generalSectionLinks: authorizedGeneralSectionLinks,
        pluginsSectionLinks: authorizedPluginSectionLinks,
        isLoading: false
      }));
    }
    applyMenuPermissions();
  }, [
    setMenuWithUserPermissions,
    generalSectionLinksRef,
    menu,
    permissions,
    shouldUpdateStrapi,
    checkUserHasPermissions
  ]);
  return menuWithUserPermissions;
};
var getGeneralLinks = async (generalSectionRawLinks, shouldUpdateStrapi = false, checkUserHasPermissions) => {
  const generalSectionLinksPermissions = await Promise.all(generalSectionRawLinks.map(({ permissions }) => checkUserHasPermissions(permissions)));
  const authorizedGeneralSectionLinks = generalSectionRawLinks.filter((_, index) => generalSectionLinksPermissions[index].length > 0);
  const settingsLinkIndex = authorizedGeneralSectionLinks.findIndex((obj) => obj.to === "/settings");
  if (settingsLinkIndex === -1) {
    return [];
  }
  const authorizedGeneralLinksClone = (0, import_cloneDeep.default)(authorizedGeneralSectionLinks);
  authorizedGeneralLinksClone[settingsLinkIndex].notificationsCount = shouldUpdateStrapi ? 1 : 0;
  return authorizedGeneralLinksClone;
};
var getPluginSectionLinks = async (pluginsSectionRawLinks, checkUserHasPermissions) => {
  const pluginSectionLinksPermissions = await Promise.all(pluginsSectionRawLinks.map(({ permissions }) => checkUserHasPermissions(permissions)));
  const authorizedPluginSectionLinks = pluginsSectionRawLinks.filter((_, index) => pluginSectionLinksPermissions[index].length > 0);
  return authorizedPluginSectionLinks;
};
var { version: strapiVersion } = package_default;
var AdminLayout = () => {
  const setGuidedTourVisibility = useGuidedTour("AdminLayout", (state) => state.setGuidedTourVisibility);
  const { formatMessage } = useIntl();
  const userInfo = useAuth("AuthenticatedApp", (state) => state.user);
  const [userId, setUserId] = React.useState();
  const { showReleaseNotification } = useConfiguration("AuthenticatedApp");
  const { data: appInfo, isLoading: isLoadingAppInfo } = useInformationQuery();
  const [tagName, setTagName] = React.useState(strapiVersion);
  React.useEffect(() => {
    if (showReleaseNotification) {
      fetch("https://api.github.com/repos/strapi/strapi/releases/latest").then(async (res) => {
        if (!res.ok) {
          return;
        }
        const response = await res.json();
        if (!response.tag_name) {
          throw new Error();
        }
        setTagName(response.tag_name);
      }).catch(() => {
      });
    }
  }, [
    showReleaseNotification
  ]);
  const userRoles = useAuth("AuthenticatedApp", (state) => {
    var _a;
    return (_a = state.user) == null ? void 0 : _a.roles;
  });
  React.useEffect(() => {
    if (userRoles) {
      const isUserSuperAdmin = userRoles.find(({ code }) => code === "strapi-super-admin");
      if (isUserSuperAdmin && (appInfo == null ? void 0 : appInfo.autoReload)) {
        setGuidedTourVisibility(true);
      }
    }
  }, [
    userRoles,
    appInfo == null ? void 0 : appInfo.autoReload,
    setGuidedTourVisibility
  ]);
  React.useEffect(() => {
    hashAdminUserEmail(userInfo).then((id) => {
      if (id) {
        setUserId(id);
      }
    });
  }, [
    userInfo
  ]);
  const { trackUsage } = useTracking();
  const { isLoading: isLoadingMenu, generalSectionLinks, pluginsSectionLinks } = useMenu(checkLatestStrapiVersion(strapiVersion, tagName));
  useOnce(() => {
    trackUsage("didAccessAuthenticatedAdministration");
  });
  if (isLoadingMenu || isLoadingAppInfo) {
    return (0, import_jsx_runtime.jsx)(Page.Loading, {});
  }
  return (0, import_jsx_runtime.jsxs)(AppInfoProvider, {
    ...appInfo,
    userId,
    latestStrapiReleaseTag: tagName,
    shouldUpdateStrapi: checkLatestStrapiVersion(strapiVersion, tagName),
    children: [
      (0, import_jsx_runtime.jsx)(NpsSurvey, {}),
      (0, import_jsx_runtime.jsx)(PluginsInitializer, {
        children: (0, import_jsx_runtime.jsx)(DndProvider, {
          backend: HTML5Backend,
          children: (0, import_jsx_runtime.jsxs)(Box, {
            background: "neutral100",
            children: [
              (0, import_jsx_runtime.jsx)(SkipToContent, {
                children: formatMessage({
                  id: "skipToContent",
                  defaultMessage: "Skip to content"
                })
              }),
              (0, import_jsx_runtime.jsxs)(Flex, {
                alignItems: "flex-start",
                children: [
                  (0, import_jsx_runtime.jsx)(LeftMenu, {
                    generalSectionLinks,
                    pluginsSectionLinks
                  }),
                  (0, import_jsx_runtime.jsxs)(Box, {
                    flex: 1,
                    children: [
                      (0, import_jsx_runtime.jsx)(Outlet, {}),
                      (0, import_jsx_runtime.jsx)(GuidedTourModal, {})
                    ]
                  })
                ]
              })
            ]
          })
        })
      })
    ]
  });
};
var PrivateAdminLayout = () => {
  return (0, import_jsx_runtime.jsx)(PrivateRoute, {
    children: (0, import_jsx_runtime.jsx)(AdminLayout, {})
  });
};
var checkLatestStrapiVersion = (currentPackageVersion, latestPublishedVersion = "") => {
  if (!(0, import_valid.default)(currentPackageVersion) || !(0, import_valid.default)(latestPublishedVersion)) {
    return false;
  }
  return (0, import_lt.default)(currentPackageVersion, latestPublishedVersion);
};
export {
  AdminLayout,
  PrivateAdminLayout
};
//# sourceMappingURL=AuthenticatedLayout-CL0_UBdl-PDWKBRRO.js.map
