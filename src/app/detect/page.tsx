'use client';

import { useState, useEffect } from 'react';
import { FaSpinner, FaCheckCircle, FaRobot, FaBars, FaHome, FaHistory } from 'react-icons/fa';
import "@/styles/page.css";
import { useRouter } from 'next/navigation';
import Cookies from 'js-cookie';
import { supabase } from '@/lib/supabase';

export default function Page() {
  const [loading, setLoading] = useState<boolean>(false);
  const [error, setError] = useState<string | null>(null);
  const [sidebarOpen, setSidebarOpen] = useState<boolean>(true);
  const [isMounted, setIsMounted] = useState<boolean>(false);
  const [text, setText] = useState<string>('');
  const [wordCount, setWordCount] = useState<number>(0);
  const [iaProbability, setIaProbability] = useState<number>(0);
  const [humanProbability, setHumanProbability] = useState<number>(100);
  const [resultText, setResultText] = useState<string>('');
  const router = useRouter();

  const handleLogout = () => {
    Cookies.remove('supabaseToken');
    router.push('/detect/login');
  };

  const handleHomeClick = () => {
    router.push('/detect');
  };

  const handleHistoryClick = () => {
    router.push('/detect/history');
  };

  const toggleSidebar = () => {
    setSidebarOpen(prevState => !prevState);
  };

  const handleTextChange = (e: React.ChangeEvent<HTMLTextAreaElement>) => {
    const inputText = e.target.value;
    setText(inputText);
    setWordCount(inputText.split(' ').length);
  };

  const handleDetect = async () => {
    setLoading(true);
    setError(null);
    setIaProbability(0);
    setHumanProbability(100);
    setResultText('');

    try {
      const randomIaProbability = Math.random() * 100;
      const randomHumanProbability = 100 - randomIaProbability;

      setIaProbability(randomIaProbability);
      setHumanProbability(randomHumanProbability);

      if (randomIaProbability > randomHumanProbability) {
        setResultText('Maior possibilidade de ser IA');
      } else {
        setResultText('Maior possibilidade de ser humano');
      }

      const { error: insertError } = await supabase
        .from('history_detected')
        .insert([{
          text: text,
          result: randomIaProbability > randomHumanProbability ? 'AI detected' : 'Human detected',
          timestamp: new Date().toISOString(),
          details: JSON.stringify({
            iaProbability: randomIaProbability,
            humanProbability: randomHumanProbability,
            resultText: resultText,
          }),
        }]);

      if (insertError) {
        console.error('Error saving detection history:', insertError);
        setError('An error occurred while saving the detection history.');
      }
    } catch (error: any) {
      console.error('Error detecting AI text:', error);
      setError('An error occurred during the detection.');
    } finally {
      setLoading(false);
    }
  };

  return (
    <div className="container">
      <header className="header">
        <img src="/detect/login/undetectable_ai_cover.png" alt="Undetectable AI Logo" className="header-logo" />
        <button className="hamburger" onClick={toggleSidebar}>
          <FaBars />
        </button>
      </header>

      <main className={`main-content ${!sidebarOpen ? 'expanded' : ''}`}>
        <aside className={`sidebar ${sidebarOpen ? 'open' : 'closed'}`}>
          <nav>
            <ul>
              <li><a href="#" onClick={handleHomeClick}><FaHome /> Home</a></li>
              <li><a href="#" onClick={handleHistoryClick}><FaHistory /> Detection History</a></li>
            </ul>
            <button className="logout-button" onClick={handleLogout}>Logout</button>
          </nav>
        </aside>

        <div className="card-container">
          <div className="input-card">
            <h1>Text AI Detector</h1>
            <p className="description">
              This tool allows you to check if the entered text was generated by artificial intelligence.
              Just paste or type your content and click "Generate Analysis" to get a result with the probability.
            </p>

            <div className="input-container">
              <textarea
                placeholder="Type the text here..."
                value={text}
                onChange={handleTextChange}
              />
              <div className="word-counter">
                <span>Words: <strong>{wordCount}</strong> / 3000</span>
              </div>
            </div>

            <div className="generate-btn-container">
              <button className="generate-btn" onClick={handleDetect} disabled={loading}>
                {loading ? <FaSpinner className="spinner" /> : 'Generate Analysis'}
              </button>
            </div>
          </div>

          <div className="result-card">
            <div className="result-header">
              <FaRobot style={{ fontSize: '50px', color: '#007bff' }} />
              <h2>AI Check</h2>
            </div>

            <div className="result-body">
              <div className="percentage">
                <p><strong>AI Probability:</strong></p>
                <div className="progress-bar" style={{ backgroundColor: '#f8d7da' }}>
                  <div className="progress" style={{ width: `${iaProbability}%`, backgroundColor: 'red' }}></div>
                </div>
                <p className="percent-text">{iaProbability.toFixed(2)}%</p>
              </div>

              <div className="percentage">
                <p><strong>Human Probability:</strong></p>
                <div className="progress-bar" style={{ backgroundColor: '#d4edda' }}>
                  <div className="progress" style={{ width: `${humanProbability}%`, backgroundColor: 'green' }}></div>
                </div>
                <p className="percent-text">{humanProbability.toFixed(2)}%</p>
              </div>

              {wordCount > 200 && (
                <div className="precision-warning" style={{ marginTop: '20px' }}>
                  <p><strong>Note:</strong> Above 200 words, the detection has higher accuracy.</p>
                </div>
              )}

              <div className="result-info">
                <div className="info-item">
                  <FaCheckCircle />
                  <p>{resultText}</p>
                </div>
              </div>
            </div>
          </div>
        </div>
      </main>
    </div>
  );
}
